---

- name: copy script
  tags: vg
  copy:
    src: files/check_disk_init.sh
    dest: /tmp/check_disk_init.sh
    mode: 0744

- name: run script to check if disk is initizlied
  tags: vg
  shell: /tmp/check_disk_init.sh "{{ item.disk }}"
  register: diskinit
 
- name: display disk init status
  tags: vg
  debug: 
    var: diskinit.stdout

- name: create initial partition
  tags: vg
  parted:
    device: "{{ item.disk }}"
    part_type: logical
    label: gpt
    number: 1
    part_start: 0MB
    part_end: 100MB
    flags: [ lvm ]
    unit: MB
    state: present
  when:  diskinit.stdout  == "no"

- name: display info
  tags: vg
  parted:
    device: "{{ item.disk}}"
    unit: MB
  register:  disk_info

- name: set vars
  tags: vg
  set_fact:
    endpoint: "{{ disk_info.partitions[-1].end }}"
    endnum:  "{{ disk_info.partitions[-1].num }}"
    part_size: "{{ item.size }}"
    disk: "{{ item.disk}}"
    vgname: "{{ item.vgname }}"
    label: "{{ item.label }}"

- name: create partition
  tags: vg
  parted:
    device: "{{ disk }}"
    part_type: logical
    label: "{{ label }}"
    number: "{{ (endnum | int | abs) + 1 }}"
    part_start: "{{ (endpoint | int | abs) + 1 }}MB"
    part_end: "{{ (endpoint | int | abs) + 1 + (part_size | int | abs) }}MB"
    flags: [ lvm ]
    unit: MB
    state: present

- name: copy script
  tags: vg
  copy:
    src: files/check_vg.sh
    dest: /tmp/check_vg.sh
    mode: 0744
- name: run script to check if vg exists
  tags: vg
  shell: /tmp/check_vg.sh "{{ vgname }}"
  register: vgexists

- name: create vg
  tags: vg
  lvg:
    vg: "{{ vgname }}"
    pvs: "{{ disk + ((endnum | int | abs) + 1) | string}}"
  when:  vgexists.stdout  == "no"

- name: extend vg
  tags: vg
  shell: |
    vgextend "{{ vgname }}" "{{ disk + ((endnum | int | abs) + 1) | string}}"
  when:  vgexists.stdout  == "yes"
